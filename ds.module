<?php

/**
 * @file
 * Display Suite core functions.
 */

use Drupal\Core\Template\Attribute;
use Drupal\entity\Plugin\Core\Entity;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Cache\CacheBackendInterface;

/**
 * Constants for field types.
 */
define('DS_FIELD_TYPE_THEME', 1);
define('DS_FIELD_TYPE_FUNCTION', 2);
define('DS_FIELD_TYPE_PREPROCESS', 3);
define('DS_FIELD_TYPE_IGNORE', 4);
define('DS_FIELD_TYPE_CODE', 5);
define('DS_FIELD_TYPE_BLOCK', 6);

/**
 * Constants for block fields rendering.
 */
define('DS_BLOCK_TEMPLATE', 1);
define('DS_BLOCK_TITLE_CONTENT', 2);
define('DS_BLOCK_CONTENT', 3);

/**
 * Implements hook_permission().
 */
function ds_permission() {
  return array(
    'admin_display_suite' => array(
      'title' => t('Administer Display Suite'),
      'description' => t('General permission for Display Suite settings pages.')
    ),
  );
}

/**
 * Implements hook_hook_info().
 */
function ds_hook_info() {
  $hooks['ds_fields_info'] = array(
    'group' => 'ds_fields_info',
  );
  return $hooks;
}

/**
 * Implements hook_menu().
 */
function ds_menu() {
  $items = array();

  // Layout overview.
  $items['admin/structure/ds'] = array(
    'title' => 'Display Suite',
    'description' => 'Manage layouts for entities and configure fields, view modes etc.',
    'page callback' => 'ds_layout_list',
    'file' => 'includes/displays.inc',
    'access arguments' => array('admin_display_suite'),
  );

  // Layout overview, primary tab.
  $items['admin/structure/ds/list'] = array(
    'title' => 'Displays',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Layout overview, secondary tab.
  $items['admin/structure/ds/list/list'] = array(
    'title' => 'List',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Emergency page
  $items['admin/structure/ds/list/emergency'] = array(
    'title' => 'Emergency',
    'description' => 'In case you have errors via Display Suite, visit this page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ds_emergency'),
    'access arguments' => array('admin_display_suite'),
    'file' => 'includes/displays.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );

  // Change layout.
  $items['admin/structure/ds/change-layout'] = array(
    'title' => 'Change layout',
    'description' => 'Act on layout change to move fields elsewhere',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ds_field_ui_layout_change'),
    'access arguments' => array('admin_display_suite'),
    'file' => 'includes/field_ui.inc',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  // Contextual links.
  if (module_exists('contextual') && module_exists('field_ui')) {
    $items['node/%node/display'] = array(
      'title' => 'Manage display',
      'description' => 'Manage display of this content.',
      'page callback' => 'ds_contextual_page_tab',
      'page arguments' => array(1, 'node'),
      'file' => 'includes/contextual.inc',
      'access arguments' => array('administer content types'),
      'type' => MENU_LOCAL_TASK,
    );

    $items['user/%user/display'] = array(
      'title' => 'Manage display',
      'description' => 'Manage display of this user profile.',
      'page callback' => 'ds_contextual_page_tab',
      'page arguments' => array(1, 'user'),
      'file' => 'includes/contextual.inc',
      'access arguments' => array('administer users'),
      'type' => MENU_LOCAL_TASK,
    );

    if (module_exists('taxonomy')) {
      $items['taxonomy/term/%taxonomy_term/display'] = array(
        'title' => 'Manage display',
        'description' => 'Manage display of this term.',
        'page callback' => 'ds_contextual_page_tab',
        'page arguments' => array(2, 'taxonomy_term'),
        'access arguments' => array('administer taxonomy'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 11,
        'file' => 'includes/contextual.inc',
      );
    }
  }

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function ds_menu_alter(&$items) {
  module_load_include('inc', 'ds', 'includes/registry');
  return _ds_menu_alter($items);
}

/**
 * Implements hook_theme().
 */
function ds_theme() {
  module_load_include('inc', 'ds', 'includes/registry');
  return _ds_theme();
}

/**
 * Implements hook_ds_layout_info().
 */
function ds_ds_layout_info() {
  module_load_include('inc', 'ds', 'includes/registry');
  return _ds_ds_layout_info();
}

/**
 * Implements hook_views_api().
 */
function ds_views_api() {
  return array('api' => 3);
}

/**
 * Implements hook_node_type_update().
 */
function ds_node_type_update($info) {
  if (!empty($info->old_type) && $info->old_type != $info->type) {
    module_load_include('inc', 'ds', 'includes/registry');
    _ds_entity_type_update('node', $info, 'update');
  }
}

/**
 * Implements hook_node_type_delete().
 */
function ds_node_type_delete($info) {
  module_load_include('inc', 'ds', 'includes/registry');
  _ds_entity_type_update('node', $info, 'delete');
}

/**
 * Implements hook_theme_registry_alter().
 */
function ds_theme_registry_alter(&$theme_registry) {
  module_load_include('inc', 'ds', 'includes/registry');
  _ds_theme_registry_alter($theme_registry);
}

/**
 * Implements ds_entity_bundle_info_alter().
 */
function ds_entity_bundle_info_alter(&$bundles) {
  module_load_include('inc', 'ds', 'includes/registry');
  _ds_entity_bundle_info_alter($bundles);
}

/**
 * Implements hook_entity_view_mode_info_alter().
 */
function ds_entity_view_mode_info_alter(&$view_modes) {
  module_load_include('inc', 'ds', 'includes/registry');
  _ds_entity_view_mode_info_alter($view_modes);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ds_form_field_ui_display_overview_form_alter(&$form, &$form_state) {
  form_load_include($form_state, 'inc', 'ds', 'includes/field_ui');
  // Also load admin on behalf of DS extras when enabled.
  if (module_exists('ds_extras')) {
    form_load_include($form_state, 'inc', 'ds_extras', 'includes/admin');
  }
  ds_field_ui_fields_layouts($form, $form_state);
}

/**
 * Implements hook_module_implements_alter().
 */
function ds_module_implements_alter(&$implementations, $hook) {
  // node_entity_display_alter() disables all labels on all fields
  // when the view mode is 'search_index'. If you set display modes for
  // this view mode by hand, then the hook isn't needed. Since this
  // may be called dozens of times on some pages, it's worth disabling it.
  if ($hook == 'entity_display_alter') {
    unset($implementations['node']);
  }
}

/**
 * Function to check if we go on with Display Suite.
 */
function ds_kill_switch() {
  // @todo move to state.
  if (config('ds.settings')->get('disable')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Get Display Suite layouts.
 */
function ds_get_layout_info() {
  static $layouts = FALSE;

  if (!$layouts) {
    $errors = array();

    $layouts = module_invoke_all('ds_layout_info');

    // Give modules a chance to alter the layouts information.
    drupal_alter('ds_layout_info', $layouts);

    // Check that there is no 'content' region, but ignore panel layouts.
    // Because when entities are rendered, the field items are stored into a
    // 'content' key so fields would be overwritten before they're all moved.
    foreach ($layouts as $key => $info) {
      if (isset($info['regions']['content'])) {
        $errors[] = $key;
      }
    }
    if (!empty($errors)) {
      drupal_set_message(t('Following layouts have a "content" region key which is invalid: %layouts.', array('%layouts' => implode(', ', $errors))), 'error');
    }
  }

  return $layouts;
}

/**
 * Get a layout for a given entity.
 *
 * @param $entity_type
 *   The name of the entity.
 * @param $bundle
 *   The name of the bundle.
 * @param $view_mode
 *   The name of the view mode.
 * @param $fallback
 *   Whether to fallback to default or not.
 *
 * @return $layout
 *   Array of layout variables for the regions.
 */
function ds_get_layout($entity_type, $bundle, $view_mode, $fallback = TRUE) {
  static $layouts = array();

  $layout_key = $entity_type . '_' . $bundle . '_' . $view_mode;
  if (!isset($layouts[$layout_key])) {

    $bundles = entity_get_bundles();

    $overriden = TRUE;
    if ($view_mode != 'form') {
      $view_mode_settings = field_view_mode_settings($entity_type, $bundle);
      $overriden = (!empty($view_mode_settings[$view_mode]['custom_settings']) ? TRUE : FALSE);
    }
    // Check if a layout is configured.
    if (isset($bundles[$entity_type][$bundle]['layouts'][$view_mode]) && ($overriden || $view_mode == 'default')) {
      $layouts[$layout_key] = $bundles[$entity_type][$bundle]['layouts'][$view_mode];
      $layouts[$layout_key]['view_mode'] = $view_mode;
    }

    // In case $view_mode is not found, check if we have a default layout,
    // but only if the view mode settings aren't overridden for this view mode.
    if ($view_mode != 'default' && !$overriden && $fallback && isset($bundles[$entity_type][$bundle]['layouts']['default'])) {
      $layouts[$layout_key] = $bundles[$entity_type][$bundle]['layouts']['default'];
      $layouts[$layout_key]['view_mode'] = 'default';
    }

    // Register the false return value as well.
    if (!isset($layouts[$layout_key])) {
      $layouts[$layout_key] = FALSE;
    }
  }

  return $layouts[$layout_key];
}

/**
 * Get all fields.
 *
 * @param $entity_type
 *   The name of the entity.
 * @param $cache
 *   Whether we need to get the fields from cache or not.
 * @return
 *   Collection of fields.
 */
function ds_get_fields($entity_type, $cache = TRUE) {

  /*
  static $static_fields, $fields_cached = array();
  static $loaded = FALSE;

  // Get fields from cache.
  if (!$loaded) {
    $loaded = TRUE;
    if ($cache && $cached_fields = cache()->get('ds_fields:' . language(LANGUAGE_TYPE_INTERFACE)->langcode)) {
      $fields_cached = $static_fields = $cached_fields->data;
    }
  }

  if (!isset($static_fields[$entity_type])) {

    // Do we have them cached or not ?
    if (!isset($fields_cached[$entity_type])) {

      // Get all fields for this entity type.
      $fields = array();
      foreach (module_implements('ds_fields_info') as $module) {
        $function = $module . '_ds_fields_info';
        $all_fields = $function($entity_type);
        if (!empty($all_fields)) {
          foreach ($all_fields as $key => $field_results) {
            if ($key === $entity_type) {
              // Add module key to field definition.
              foreach ($field_results as $f => $d) {
                $field_results[$f]['module'] = $module;
              }
              $fields = array_merge($field_results, $fields);
            }
          }
        }
      }

      // Give modules a change to alter fields.
      drupal_alter('ds_fields_info', $fields, $entity_type);

      $fields_cached[$entity_type] = $fields;

      // Cache the fields.
      if ($cache) {
        cache()->set('ds_fields:' . language(LANGUAGE_TYPE_INTERFACE)->langcode, $fields_cached, CacheBackendInterface::CACHE_PERMANENT, array('ds_fields' => TRUE));
      }
    }
    else {
      $fields = $fields_cached[$entity_type];
    }

    // Store the fields statically.
    $static_fields[$entity_type] = $fields;
  }
  */

  foreach (drupal_container()->get('plugin.manager.ds')->getDefinitions() as $plugin_id => $plugin) {
    $static_fields[$plugin['entity_type']][$plugin_id] = $plugin;
  }

  return isset($static_fields[$entity_type]) ? $static_fields[$entity_type] : array();
}

/**
 * Get the field settings.
 *
 * @param $entity_type
 *   The name of the entity.
 * @param $bundle
 *   The name of bundle (ie, page or story for node types, profile for users)
 * @param $view_mode
 *   The name of view mode.
 */
function ds_get_field_settings($entity_type, $bundle, $view_mode, $default = TRUE) {
  static $field_settings = NULL;

  if (!isset($field_settings)) {
    if ($cache = cache()->get('ds_field_settings')) {
      $field_settings = $cache->data;
    }
    else {
      $ds_field_settings = config_get_storage_names_with_prefix('ds.field_settings');
      foreach ($ds_field_settings as $config) {
        $field_setting = config($config)->get();
        if (!isset($field_setting['settings'])) {
          continue;
        }
        foreach ($field_setting['settings'] as $field => $settings) {
          $field_settings[$field_setting['entity_type']][$field_setting['bundle']][$field_setting['view_mode']][$field] = $settings;
        }
      }
      cache()->set('ds_field_settings', $field_settings, CacheBackendInterface::CACHE_PERMANENT, array('ds_fields' => TRUE));
    }
  }

  return (isset($field_settings[$entity_type][$bundle][$view_mode])) ? $field_settings[$entity_type][$bundle][$view_mode] : (isset($field_settings[$entity_type][$bundle]['default']) && $default ? $field_settings[$entity_type][$bundle]['default'] : array());
}

/**
 * Get the value for a Display Suite field.
 *
 * @param $key
 *   The key of the field.
 * @param $field
 *   The configuration of a DS field.
 * @param $entity
 *   The current entity.
 * @param $view_mode
 *   The name of the view mode.
 * @param $build
 *   The current built of the entity.
 * @return $markup
 *   The markup of the field used for output.
 */
function ds_get_field_value($key, $field, $entity, $view_mode, $build = array()) {

  $field['field_name'] = $key;
  $field['entity'] = $entity;
  $field['entity_type'] = $entity->entityType();
  $field['bundle'] = $entity->bundle();
  $field['view_mode'] = $view_mode;
  $field['build'] = $build;

  // Load the plugin.
  $field_instance = drupal_container()->get('plugin.manager.ds')->createInstance($field['id']);

  // Renderd the field.
  return $field_instance->renderField($field);

  /*
  switch ($field['field_type']) {

    case DS_FIELD_TYPE_PREPROCESS:
      $entity->preprocess_fields[] = $key;
      break;

    case DS_FIELD_TYPE_FUNCTION:
      if (isset($field['file'])) {
        include_once $field['file'];
      }
      return $field['function']($field);

    case DS_FIELD_TYPE_THEME:
      $format = (isset($field['formatter'])) ? $field['formatter'] : key($field['properties']['formatters']);
      return theme($format, $field);

    case DS_FIELD_TYPE_CODE:
      return ds_render_code_field($field);

    case DS_FIELD_TYPE_BLOCK:
      return ds_render_block_field($field);
  }
  */
}

/**
 * Implements hook_field_attach_view_alter().
 */
function ds_field_attach_view_alter(&$build, $context) {
  static $loaded_css = array();
  static $field_permissions = FALSE;
  static $loaded = FALSE;

  if (!$loaded) {
    $loaded = TRUE;
    $field_permissions = config('ds.extras')->get('field_permissions');
  }

  // Global kill switch. In some edge cases, a view might
  // be inserted into the view of an entity, in which the
  // same entity is available as well. This is simply not
  // possible, so you can temporarily disable DS completely
  // by setting this variable, either from code or via
  // the UI through admin/structure/ds/
  if (ds_kill_switch()) {
    return;
  }

  $entity_type = $context['entity']->entityType();
  $bundle = $context['entity']->bundle();
  $view_mode = $context['view_mode'];

  // If no layout is configured, stop as well.
  if (!ds_get_layout($entity_type, $bundle, $view_mode)) {
    return;
  }

  $entity = $context['entity'];
  $layout = ds_get_layout($entity_type, $bundle, $view_mode);

  // Put #entity_type, #bundle and #layout on the build so we can
  // access it in ds_entity_variables().
  $build['#entity_type'] = $entity_type;
  $build['#bundle'] = $bundle;
  $build['#ds_layout'] = $layout;

  // Check on field/delta limit.
  if (isset($layout['settings']['limit'])) {
    foreach ($layout['settings']['limit'] as $field => $limit) {
      if (isset($build[$field])) {
        if ($limit === 'delta' && isset($entity->ds_delta) && isset($entity->ds_delta[$field])) {
          $delta = $entity->ds_delta[$field];
          foreach ($build[$field]['#items'] as $key => $item) {
            if ($key != $delta) {
              unset($build[$field][$key]);
            }
          }
        }
        else {
          $count = count($build[$field]['#items']);
          if ($count > $limit) {
            $build[$field]['#items'] = array_slice($build[$field]['#items'], 0, $limit);
          }
        }
      }
    }
  }

  // Add Display Suite fields.
  $fields = ds_get_fields($entity_type);
  $field_values = ds_get_field_settings($entity_type, $bundle, $view_mode);
  foreach ($field_values as $key => $field) {

    // Ignore if this field is not a DS field.
    if (!isset($fields[$key])) {
      continue;
    }

    $field = $fields[$key];
    if (isset($field_values[$key]['format'])) {
      $field['formatter'] = $field_values[$key]['format'];
    }

    if (isset($field_values[$key]['formatter_settings'])) {
      $field['formatter_settings'] = $field_values[$key]['formatter_settings'];
    }
    $field_value = ds_get_field_value($key, $field, $entity, $view_mode, $build);

    // Title label.
    if ($key == 'title' && $entity_type == 'node') {
      $node_type = node_type_load($entity->type);
      $field['title'] = function_exists('i18n_node_translate_type') ? i18n_node_translate_type($entity->type, 'title_label') : $node_type->title_label;
    }

    if (!empty($field_value) || (string) $field_value === '0') {

      $build[$key] = array(
        '#theme' => 'field',
        '#field_type' => 'ds',
        '#title' => $field['title'],
        '#weight' => isset($field_values[$key]['weight']) ? $field_values[$key]['weight'] : 0,
        '#label_display' => isset($field_values[$key]['label']) ? $field_values[$key]['label'] : 'inline',
        '#field_name' => $key,
        '#bundle' => $bundle,
        '#language' => $entity->langcode,
        '#object' => $entity,
        '#entity_type' => $entity_type,
        '#view_mode' => $view_mode,
        '#access' => ($field_permissions && function_exists('ds_extras_ds_field_access')) ? ds_extras_ds_field_access($key, $entity_type) : TRUE,
        '#items' => array(
          0 => array(
            'value' => $field_value,
          ),
        ),
        0 => array(
          '#markup' => $field_value,
        ),
      );
    }
  }

  // Add css file for this layout.
  if (isset($layout['css']) && !isset($loaded_css[$layout['path'] . '/' . $layout['layout'] . '.css'])) {
    // Register.
    $loaded_css[$layout['path'] . '/' . $layout['layout'] . '.css'] = TRUE;
    // Add to #attached.
    $build['#attached']['css'][] = $layout['path'] . '/' . $layout['layout'] . '.css';
  }
}

/**
 * Process layout.
 *
 * This function is added in ds_theme_registry_alter().
 */
function ds_preprocess_ds_layout(&$vars) {
  if (isset($vars['elements']['#ds_layout'])) {

    $layout = $vars['elements']['#ds_layout'];

    $render_container = 'content';

    // Move any preprocess fields to render container.
    // Inconsitency in taxonomy term naming.
    $object = $vars['elements']['#entity_type'];
    if ($vars['elements']['#entity_type'] == 'taxonomy_term') {
      $object = 'term';
    }

    if (isset($vars[$object]->preprocess_fields)) {
      foreach ($vars[$object]->preprocess_fields as $field) {

        // Process RDF if the module is enabled before moving preprocess fields.
        if (module_exists('rdf')) {
          rdf_process($vars, $field);
          // Remove it so we can unset the field later on.
          unset($vars['rdf_template_variable_attributes_array'][$field]);
        }

        // Move the field to content so it renders, remove it
        // because we don't need it anymore.
        if (isset($vars[$field])) {
          $vars[$render_container][$field] = array('#markup' => $vars[$field]);
          if (!isset($vars['preprocess_keep'])) {
            unset($vars[$field]);
          }
        }
      }
    }

    // Template layout.
    if (!isset($vars['classes_array'])) {
      $vars['classes_array'] = array();
    }

    // Add view-mode-{name} to classes.
    if (!in_array('view-mode-' . $vars['elements']['#view_mode'], $vars['classes_array'])) {
      $vars['classes_array'][] = 'view-mode-' . $vars['elements']['#view_mode'];
    }

    $vars['theme_hook_suggestions'][] = $layout['layout'];
    $vars['theme_hook_suggestions'][] = $layout['layout'] . '__' . $vars['elements']['#entity_type'];
    $vars['theme_hook_suggestions'][] = $layout['layout'] . '__' . $vars['elements']['#entity_type'] . '_' . $vars['elements']['#view_mode'];
    $vars['theme_hook_suggestions'][] = $layout['layout'] . '__' . $vars['elements']['#entity_type'] . '_' . $vars['elements']['#bundle'];
    $vars['theme_hook_suggestions'][] = $layout['layout'] . '__' . $vars['elements']['#entity_type'] . '_' . $vars['elements']['#bundle'] . '_' . $vars['elements']['#view_mode'];

    // If the layout has wrapper class lets add it.
    if (isset($layout['settings']['classes']['layout_class'])) {
      foreach ($layout['settings']['classes']['layout_class'] as $layout_class) {
        $vars['classes_array'][] = $layout_class;
      }
    }

    // Create region variables based on the layout settings.
    foreach ($layout['regions'] as $region_name => $region) {

      // Create the region content.
      $layout_render_array[$region_name] = array();
      if (isset($layout['settings']['regions'][$region_name])) {
        foreach ($layout['settings']['regions'][$region_name] as $key => $field) {
          // Make sure the field exists.
          if (!isset($vars[$render_container][$field])) {
            continue;
          }
          if (!isset($vars[$render_container][$field]['#weight'])) {
            $vars[$render_container][$field]['#weight'] = $key;
          }
          $layout_render_array[$region_name][$key] = $vars[$render_container][$field];
        }
      }

      // Add extras classes to the region.
      if (empty($layout['flexible'])) {
        $vars[$region_name . '_classes'] = !empty($layout['settings']['classes'][$region_name]) ? ' ' . implode(' ', $layout['settings']['classes'][$region_name]) : '';
      }
      // Add a wrapper to the region.
      if (empty($layout['flexible'])) {
        $vars[$region_name . '_wrapper'] = isset($layout['settings']['wrappers'][$region_name]) ? $layout['settings']['wrappers'][$region_name] : 'div';
      }
    }

    // Let other modules know we have rendered.
    $vars['rendered_by_ds'] = TRUE;

    // Add a layout wrapper.
    $vars['layout_wrapper'] = isset($layout['settings']['layout_wrapper']) ? $layout['settings']['layout_wrapper'] : 'div';

    // Add layout attributes if any.
    $vars['layout_attributes'] = '';
    if (!empty($layout['settings']['layout_attributes'])) {
      $vars['layout_attributes'] .= ' ' . $layout['settings']['layout_attributes'];
    }
    // Merge in other attributes which were passed to the template.
    // @todo fix this
    /*if (!empty($layout['settings']['layout_attributes_merge'])) {
      // handle classes separately
      if (isset($vars['attributes_array']['class'])) {
        $vars['classes_array'] += $vars['attributes_array']['class'];
        unset($vars['attributes_array']['class']);
      }
      $vars['layout_attributes'] .= ' ' . new Attribute($vars['rdf_template_variable_attributes']);
    }*/

    // Let other modules alter the ds array before creating the region variables.
    $context = array('entity' => isset($vars[$object]) ? $vars[$object] : (isset($vars['elements']['#' . $object]) ? $vars['elements']['#' . $object] : ''), 'entity_type' => $vars['elements']['#entity_type'], 'bundle' => $vars['elements']['#bundle'], 'view_mode' => $vars['elements']['#view_mode']);
    drupal_alter('ds_pre_render', $layout_render_array, $context);
    foreach ($layout_render_array as $region_name => $content) {
      $vars[$region_name] = drupal_render($content);
    }
  }
}

/**
 * Render a code field.
 */
function ds_render_code_field($field) {
  if (isset($field['properties']['code'])) {
    $format = (isset($field['properties']['code']['format'])) ? $field['properties']['code']['format'] : 'plain_text';
    if ($format == 'ds_code' && module_exists('ds_code')) {
      $value = ds_code_php_eval($field['properties']['code']['value'], $field['entity'], isset($field['build']) ? $field['build'] : array());
    }
    else {
      $value = check_markup($field['properties']['code']['value'], $format);
    }
    // Token support - check on token property so we don't run every single field through token.
    if (isset($field['properties']['use_token']) && $field['properties']['use_token'] == TRUE) {
      $value = token_replace($value, array($field['entity_type'] => $field['entity']), array('clear' => TRUE));
    }
    return $value;
  }
}

/**
 * Render a block field.
 */
function ds_render_block_field($field) {
  $contextual = module_exists('contextual') && user_access('access contextual links');
  list($module, $delta) = explode('|', $field['properties']['block']);
  $block = module_invoke($module, 'block_view', $delta);
  $contextual_links = array();
  // Get contextual links.
  if ($contextual) {
    if (is_array($block['content']) && isset($block['content']['#contextual_links'])) {
      $contextual_links = $block['content']['#contextual_links'];
    }
  }
  if (isset($block['content']) && is_array($block['content'])) {
    $block['content'] = drupal_render($block['content']);
  }
  if (!empty($block['content'])) {

    global $theme_key;
    $block_title = db_query("SELECT title FROM {block} WHERE module = :module AND delta = :delta AND theme = :theme", array(':module' => $module, ':delta' => $delta, ':theme' => $theme_key))->fetchField();
    if (!empty($block_title)) {
      $block['subject'] = $block_title == '<none>' ? '' : check_plain($block_title);
    }

    // i18n support.
    if (function_exists('i18n_block_block_view_alter')) {
      // Check language visibility.
      global $language;
      static $block_languages = FALSE;
      if (!$block_languages) {
        $block_languages = array();
        $result = db_query('SELECT module, delta, language FROM {i18n_block_language}');
        foreach ($result as $record) {
          $block_languages[$record->module][$record->delta][$record->language] = TRUE;
        }
      }
      if (isset($block_languages[$module][$delta]) && !isset($block_languages[$module][$delta][$language->language])) {
        return;
      }

      // Translate.
      $i18n_block = db_query("SELECT * FROM {block} WHERE module = :module AND delta = :delta", array(':module' => $module, ':delta' => $delta))->fetchObject();
      if (!empty($i18n_block->i18n_mode)) {
        i18n_block_block_view_alter($block, $i18n_block);
        // OH WTF ...
        if (!empty($i18n_block->title)) {
          $block['subject'] = $i18n_block->title;
        }
      }
    }

    $block = (object) $block;
    switch ($field['properties']['block_render']) {
      case DS_BLOCK_TEMPLATE:
        if (!isset($block->subject)) {
          $block->subject = NULL;
        }
        $block->region = NULL;
        $block->module = $module;
        $block->delta = $delta;
        $elements = array('elements' => array('#block' => $block, '#children' => $block->content));
        // Add contextual links
        if ($contextual) {
          $elements['elements'] += array('#contextual_links' => array_merge($contextual_links, array('block' => array('admin/structure/block/manage', array($block->module, $block->delta)))));
        }
        return theme('block', $elements);
        break;
      case DS_BLOCK_TITLE_CONTENT:
        return '<h2 class="block-title">' . $block->subject . '</h2>' . $block->content;
        break;
      case DS_BLOCK_CONTENT:
        return $block->content;
        break;
    }
  }
}

/**
 * Render a field.
 */
function ds_render_field($field) {

  $output = '';
  $settings = isset($field['formatter_settings']) ? $field['formatter_settings'] : array();
  $settings += $field['properties']['default'];

  // Basic string.
  if (isset($settings['link text'])) {
    $output = t($settings['link text']);
  }
  elseif (isset($field['properties']['entity_render_key']) && isset($field['entity']->{$field['properties']['entity_render_key']})) {
    if ($field['entity_type'] == 'user' && $field['properties']['entity_render_key'] == 'name') {
      $output = user_format_name($field['entity']);
    }
    else {
      $output = $field['entity']->{$field['properties']['entity_render_key']};
    }
  }

  if (empty($output)) {
    return;
  }

  // Link.
  if ($settings['link']) {
    if (isset($field['entity']->uri['path'])) {
      $path = $field['entity']->uri['path'];
    }
    else {
      $uri_info = $field['entity']->uri();
      $path = $uri_info['path'];
    }
    $output = l($output, $path);
  }
  else {
    $output = check_plain($output);
  }

  // Wrapper and class.
  if (!empty($settings['wrapper'])) {
    $wrapper = check_plain($settings['wrapper']);
    $class = (!empty($settings['class'])) ? ' class="' . check_plain($settings['class']) . '"' : '';
    $output = '<' . $wrapper . $class . '>' . $output . '</' . $wrapper . '>';
  }

  return $output;
}

/**
 * Render an author field.
 */
function ds_render_author_field($field) {

  // Users without a user name are anonymous users. These are never linked.
  if (empty($field['entity']->name)) {
    return check_plain(variable_get('anonymous', t('Anonymous')));
  }

  if ($field['formatter'] == 'author') {
    return check_plain($field['entity']->name);
  }

  if ($field['formatter'] == 'author_linked') {
    return theme('username', array('account' => $field['entity']));
  }
}

/**
 * Render a markup field.
 */
function ds_render_markup($field) {
  if (isset($field['entity']->{$field['properties']['key']})) {
    // Check for format, and let's take filtered_html as a sane default.
    $format = isset($field['entity']->{$field['properties']['format']}) ? $field['entity']->{$field['properties']['format']} : 'filtered_html';
    return check_markup($field['entity']->{$field['properties']['key']}, $format, '', TRUE);;
  }
}

/**
 * Return the picture.
 */
function ds_return_picture($entity) {

  // Gravatar support.
  if (module_exists('gravatar')) {
    $entity = _gravatar_load_account($entity);
    $entity->picture = _gravatar_get_account_user_picture($entity);
  }

  if (!empty($entity->picture)) {
    if (is_numeric($entity->picture)) {
      return file_load($entity->picture);
    }
    else {
      return $entity->picture;
    }
  }
  elseif (variable_get('user_picture_default', '')) {
    return variable_get('user_picture_default', '');
  }
}

/**
 * Render a user picture.
 */
function ds_render_user_picture($field) {
  $picture = ds_return_picture($field['entity']);

  if (!empty($picture)) {
    $vars = array();
    $filepath = (isset($picture->uri)) ? $picture->uri : $picture;
    $name = !empty($field['entity']->name) ? $field['entity']->name : variable_get('anonymous', t('Anonymous'));
    $alt = t("@user's picture", array('@user' => $name));
    $vars = array('path' => $filepath, 'alt' => $alt, 'title' => $alt);

    // If the image does not have a valid Drupal scheme (for eg. HTTP),
    // don't load image styles.
    if (module_exists('image') && file_valid_uri($filepath)) {
      $vars['style_name'] = str_replace('ds_picture_', '', $field['formatter']);
      $image = theme('image_style', $vars);
    }
    else {
      $image = theme('image', $vars);
    }

    if (!empty($field['entity']->uid) && user_access('access user profiles')) {
      return l($image, 'user/' . $field['entity']->uid, array('html' => TRUE));
    }
    else {
      return $image;
    }
  }
}

/**
 * Render a date field.
 */
function ds_render_date_field($field) {
  $date_format = str_replace('ds_post_date_', '', $field['formatter']);
  return format_date($field['entity']->created, $date_format);
}

/**
 * Render a "Submitted by"-line.
 */
function ds_render_submitted_by($field) {
  $account = user_load($field['entity']->uid);
  switch ($field['formatter']) {
    case 'ds_time_ago':
      $interval = REQUEST_TIME - $field['entity']->created;
      return t('Submitted !interval ago by !user.', array('!interval' => format_interval($interval), '!user' => theme('username', array('account' => $account))));
    default:
      $date_format = str_replace('ds_post_date_', '', $field['formatter']);
      return t('Submitted by !user on !date.', array('!user' => theme('username', array('account' => $account)), '!date' => format_date($field['entity']->created, $date_format)));
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function ds_field_formatter_info() {

  $formatters = array();
  if (module_exists('taxonomy')) {
    $formatters['ds_taxonomy_view_mode'] = array(
      'label'       => t('Rendered taxonomy term'),
      'description' => t('Display the referenced term in a specific view mode'),
      'field types' => array('taxonomy_term_reference'),
      'settings'    => array('taxonomy_term_reference_view_mode' => 'full'),
    );
  }

  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 */
function ds_field_formatter_view(EntityInterface $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if ($display['type'] === 'ds_taxonomy_view_mode') {
    $view_mode = $display['settings']['taxonomy_term_reference_view_mode'];
    foreach ($items as $delta => $item) {
      if ($item['tid'] == 'autocreate') {
        // We don't necessarily have a link when this is
        // an autocreated term, ususally in preview.
        // So just send the term as check plained markup.
        $build['#markup'] = check_plain($item['name']);
      }
      else {
        $build = taxonomy_term_view(taxonomy_term_load($item['tid']), $view_mode, $langcode);
      }
      $element[$delta] = $build;
    }
  }

  return $element;
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function ds_contextual_links_view_alter(&$element, $items) {

  if (isset($element['#element']['#entity_type']) && module_exists('field_ui') && user_access('administer node display')) {
    $entity_type = $element['#element']['#entity_type'];
    $bundle = $element['#element']['#bundle'];
    $view_mode = isset($element['#element']['#view_mode']) ? $element['#element']['#view_mode'] : 'default';

    // Check if we have a configured layout. Do not fallback to default.
    $layout = ds_get_layout($entity_type, $bundle, $view_mode, FALSE);

    // Get the manage display URI.
    $admin_path = field_ui_bundle_admin_path($entity_type, $bundle);

    // Check view mode settings.
    $view_mode_settings = field_view_mode_settings($entity_type, $bundle);
    $overriden = (!empty($view_mode_settings[$view_mode]['custom_settings']) ? TRUE : FALSE);

    if (empty($layout) && !$overriden) {
      $admin_path .= '/display';
    }
    else {
      $admin_path .= '/display/' . $view_mode;
    }

    $element['#links']['manage-display'] = array(
      'title' => t('Manage display'),
      'href' => $admin_path,
      'query' => drupal_get_destination(),
    );
  }
}
