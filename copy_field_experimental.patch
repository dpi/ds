diff --git a/ds.module b/ds.module
index 18f1767..51952f4 100644
--- a/ds.module
+++ b/ds.module
@@ -331,7 +331,7 @@ function ds_get_fields($entity_type, $cache = TRUE) {
   static $static_fields;
 
   if (!isset($static_fields[$entity_type])) {
-    foreach (\Drupal::service('plugin.manager.ds.plugin')->getDefinitions() as $plugin_id => $plugin) {
+    foreach (\Drupal::service('plugin.manager.ds')->getDefinitions() as $plugin_id => $plugin) {
       // Needed to get derivatives working
       $plugin['plugin_id'] = $plugin_id;
       $static_fields[$plugin['entity_type']][$plugin_id] = $plugin;
@@ -402,7 +402,7 @@ function ds_get_field_value($key, $field, $entity, $view_mode, $build = array())
   $field['build'] = $build;
 
   // Load the plugin.
-  $field_instance = drupal_container()->get('plugin.manager.ds.plugin')->createInstance($field['plugin_id']);
+  $field_instance = drupal_container()->get('plugin.manager.ds')->createInstance($field['plugin_id']);
 
   // Special case preprocess fields as they don't need to be rendered
   if ($field_instance InstanceOf PreprocessPluginBase) {
diff --git a/ds.services.yml b/ds.services.yml
index 2a645dc..aca13a1 100644
--- a/ds.services.yml
+++ b/ds.services.yml
@@ -1,4 +1,4 @@
 services:
-  plugin.manager.ds.plugin:
+  plugin.manager.ds:
     class: Drupal\ds\Plugin\DsPluginManager
     arguments: ['@container.namespaces', '@cache.block', '@language_manager', '@module_handler']
diff --git a/includes/field_ui.inc b/includes/field_ui.inc
index 8716f7e..4a51c59 100644
--- a/includes/field_ui.inc
+++ b/includes/field_ui.inc
@@ -1314,7 +1314,7 @@ function _ds_field_ui_fields($entity_type, $bundle, $view_mode, &$form, &$form_s
 
   foreach ($fields as $key => $field) {
     // Check if we can display this field here.
-    $plugin_instance = drupal_container()->get('plugin.manager.ds.plugin')->createInstance($field['plugin_id']);
+    $plugin_instance = drupal_container()->get('plugin.manager.ds')->createInstance($field['plugin_id']);
 
     if (!$plugin_instance->isAllowed($bundle, $view_mode)) {
       continue;
diff --git a/lib/Drupal/ds/Plugin/Derivative/DynamicCopyField.php b/lib/Drupal/ds/Plugin/Derivative/DynamicCopyField.php
new file mode 100644
index 0000000..e6c1fb1
--- /dev/null
+++ b/lib/Drupal/ds/Plugin/Derivative/DynamicCopyField.php
@@ -0,0 +1,22 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\ds\Plugin\Derivative\DynamicCopyField.
+ */
+
+namespace Drupal\ds\Plugin\Derivative;
+
+/**
+ * Retrieves dynamic ds field plugin definitions.
+ */
+class DynamicCopyField extends DynamicField {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getType() {
+    return DS_FIELD_TYPE_COPY;
+  }
+
+}
diff --git a/lib/Drupal/ds/Plugin/DsField/DynamicCopyField.php b/lib/Drupal/ds/Plugin/DsField/DynamicCopyField.php
new file mode 100644
index 0000000..5b6084d
--- /dev/null
+++ b/lib/Drupal/ds/Plugin/DsField/DynamicCopyField.php
@@ -0,0 +1,46 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\ds\Plugin\DsField\DynamicCopyField.
+ */
+
+namespace Drupal\ds\Plugin\DsField;
+
+use Drupal\ds\Annotation\DsField;
+use Drupal\Core\Annotation\Translation;
+
+/**
+ * Defines a generic dynamic block field.
+ *
+ * @DsField(
+ *   id = "dynamic_copy_field",
+ *   derivative = "Drupal\ds\Plugin\Derivative\DynamicCopyField",
+ *   module = "ds"
+ * )
+ */
+class DynamicCopyField extends DsFieldBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function render($field) {
+    $definition = $this->getPluginDefinition();
+    $id = $definition['properties']['field'];
+
+    $manager = \Drupal::service('plugin.manager.ds');
+    $field_instance = $manager->createInstance($id);
+
+    return $field_instance->render($field);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isAllowed($bundle, $view_mode) {
+    $definition = $this->getPluginDefinition();
+
+    return DsFieldBase::dynamicFieldIsAllowed($definition, $bundle, $view_mode);
+  }
+
+}
diff --git a/modules/ds_ui/ds_ui.local_actions.yml b/modules/ds_ui/ds_ui.local_actions.yml
index 936bcad..4088249 100644
--- a/modules/ds_ui/ds_ui.local_actions.yml
+++ b/modules/ds_ui/ds_ui.local_actions.yml
@@ -13,3 +13,8 @@ ds_preprocess_field_add_local_action:
   title: 'Add a preprocess field'
   appears_on:
     - fields_list
+ds_copy_field_add_local_action:
+  route_name: add_copy_field
+  title: 'Add a copy of a field'
+  appears_on:
+    - fields_list
diff --git a/modules/ds_ui/ds_ui.module b/modules/ds_ui/ds_ui.module
index 18a7520..8569b2b 100644
--- a/modules/ds_ui/ds_ui.module
+++ b/modules/ds_ui/ds_ui.module
@@ -8,6 +8,7 @@
 define('DS_FIELD_TYPE_CODE', 'code_field');
 define('DS_FIELD_TYPE_BLOCK', 'block_field');
 define('DS_FIELD_TYPE_PREPROCESS', 'preprocess_field');
+define('DS_FIELD_TYPE_COPY', 'copy_field');
 
 /**
  * Implements hook_permission().
diff --git a/modules/ds_ui/ds_ui.routing.yml b/modules/ds_ui/ds_ui.routing.yml
index a8d4090..1b909ee 100644
--- a/modules/ds_ui/ds_ui.routing.yml
+++ b/modules/ds_ui/ds_ui.routing.yml
@@ -65,3 +65,17 @@ add_block_field:
     _title: 'Add a block field'
   requirements:
     _permission: 'admin fields'
+manage_copy_field:
+  pattern: 'admin/structure/ds/fields/manage_copy/{field_key}'
+  defaults:
+    _form: '\Drupal\ds_ui\Form\CopyFieldForm'
+    _title: 'Edit a copy of a field'
+  requirements:
+    _permission: 'admin fields'
+add_copy_field:
+  pattern: 'admin/structure/ds/fields/manage_copy'
+  defaults:
+    _form: '\Drupal\ds_ui\Form\CopyFieldForm'
+    _title: 'Add a copy of a field'
+  requirements:
+    _permission: 'admin fields'
diff --git a/modules/ds_ui/lib/Drupal/ds_ui/Form/CopyFieldForm.php b/modules/ds_ui/lib/Drupal/ds_ui/Form/CopyFieldForm.php
new file mode 100644
index 0000000..1481af5
--- /dev/null
+++ b/modules/ds_ui/lib/Drupal/ds_ui/Form/CopyFieldForm.php
@@ -0,0 +1,70 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\ds_ui\Form\CopyFieldForm.
+ */
+
+namespace Drupal\ds_ui\Form;
+
+use Drupal\ds_ui\Form\FieldFormBase;
+
+/**
+ * Configure block fields.
+ */
+class CopyFieldForm extends FieldFormBase{
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFormID() {
+    return 'ds_field_form';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, array &$form_state, $field_key = '') {
+    $form = parent::buildForm($form, $form_state, $field_key);
+
+    if (empty($field_key)) {
+      $form['#title'] = 'Add a copy of a field';
+    }
+    else {
+      $form['#title'] = 'Edit a copy of a field';
+    }
+
+    $field = $this->field;
+
+    $manager = \Drupal::service('plugin.manager.ds');
+
+    $fields = array();
+    foreach ($manager->getDefinitions() as $plugin_id => $plugin_definition) {
+      $fields[$plugin_id] = $plugin_definition['title'];
+    }
+    asort($fields);
+
+    $form['ds_field_identity']['field'] = array(
+      '#type' => 'select',
+      '#options' => $fields,
+      '#title' => t('Fields'),
+      '#required' => TRUE,
+      '#default_value' => isset($field['properties']['field']) ? $field['properties']['field'] : '',
+    );
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function validateForm(array &$form, array &$form_state) {
+    parent::validateForm($form, $form_state);
+
+    $field = &$this->field;
+    $field['field_type'] = DS_FIELD_TYPE_COPY;
+    $field['properties'] = array();
+    $field['properties']['field'] = $form_state['values']['field'];
+  }
+
+}
diff --git a/modules/ds_ui/lib/Drupal/ds_ui/Routing/FieldController.php b/modules/ds_ui/lib/Drupal/ds_ui/Routing/FieldController.php
index 1a87fa5..2344ec8 100644
--- a/modules/ds_ui/lib/Drupal/ds_ui/Routing/FieldController.php
+++ b/modules/ds_ui/lib/Drupal/ds_ui/Routing/FieldController.php
@@ -115,6 +115,8 @@ class FieldController extends ControllerBase implements ControllerInterface {
         return $this->t('Block field');
       case DS_FIELD_TYPE_PREPROCESS:
         return $this->t('Preprocess field');
+      case DS_FIELD_TYPE_COPY:
+        return $this->t('Copy field');
     }
 
     // Fallback
@@ -126,7 +128,7 @@ class FieldController extends ControllerBase implements ControllerInterface {
    */
   public function manageRedirect($field_key) {
     $redirect = '';
-    if ($field = $this->configFactory->get('ds.field.' . $field_key)->get()) {
+    if ($field = \Drupal::config('ds.field.' . $field_key)->get()) {
       switch ($field['field_type']) {
         case DS_FIELD_TYPE_CODE:
           $redirect = 'admin/structure/ds/fields/manage_code/' . $field_key;
@@ -139,6 +141,10 @@ class FieldController extends ControllerBase implements ControllerInterface {
         case DS_FIELD_TYPE_PREPROCESS:
           $redirect = 'admin/structure/ds/fields/manage_preprocess/' . $field_key;
           break;
+
+        case DS_FIELD_TYPE_COPY:
+          $redirect = 'admin/structure/ds/fields/manage_copy/' . $field_key;
+          break;
       }
     }
 
