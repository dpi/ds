<?php

/**
 * @file
 * Administrative functions for managing view modes for every entity.
 */

/**
 * Manage a custom view mode.
 */
function ds_edit_view_mode_form($form, &$form_state, $view_mode = '') {

  if (!empty($view_mode)) {
    $view_mode = config('ds.view_modes.' . $view_mode)->get();
  }

  if (!$view_mode) {
    $view_mode = array();
    $view_mode['label'] = '';
    $view_mode['view_mode'] = '';
    $view_mode['entities'] = array();
  }

  $form['name'] = array(
    '#title' => t('Label'),
    '#type' => 'textfield',
    '#default_value' => $view_mode['label'],
    '#description' => t('The human-readable label of the view mode. This name must be unique.'),
    '#required' => TRUE,
    '#maxlength' => 32,
    '#size' => 30,
  );

  $form['view_mode'] = array(
    '#title' => t('Machine name'),
    '#type' => 'machine_name',
    '#default_value' => $view_mode['view_mode'],
    '#maxlength' => 32,
    '#description' => t('The machine-readable name of this view mode. This name must contain only lowercase letters and underscores. This name must be unique.'),
    '#disabled' => !empty($view_mode['view_mode']),
    '#machine_name' => array(
      'exists' => 'ds_view_mode_unique',
      'source' => array('name'),
    ),
  );

  $entity_options = array();
  $entities = entity_get_info();
  foreach ($entities as $entity_type => $entity_info) {
    if (isset($entity_info['fieldable']) && $entity_info['fieldable']) {
      $entity_options[$entity_type] = drupal_ucfirst(str_replace('_', ' ', $entity_type));
    }
  }
  $form['entities'] = array(
    '#title' => t('Entities'),
    '#description' => t('Select the entities for which this view mode will be made available.'),
    '#type' => 'checkboxes',
    '#required' => TRUE,
    '#options' => $entity_options,
    '#default_value' => $view_mode['entities'],
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );

  $form['existing'] = array('#type' => 'value', '#value' => !empty($view_mode['view_mode']));

  return $form;
}

/**
 * Return whether a view mode machine name is unique.
 */
function ds_view_mode_unique($name) {
  $value = strtr($name, array('-' => '_'));
  if (config('ds.view_modes.' . $value)->get()) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Validates the view mode submission form generated by ds_edit_view_mode_form().
 */
function ds_edit_view_mode_form_validate($form, &$form_state) {

  $view_mode = array();
  $view_mode['view_mode'] = $form_state['values']['view_mode'];
  $view_mode['label'] = $form_state['values']['name'];

  $reserved = array();
  $entities = $form_state['values']['entities'];
  foreach ($entities as $key => $value) {
    if ($key !== $value) {
      unset($entities[$key]);
    }
    else {
      $reserved += entity_get_view_modes($key);
    }
  }

  if (array_key_exists($view_mode['view_mode'], $reserved) && !isset($form_state['values']['existing'])) {
    form_set_error('type', t('The machine-readable name %view_mode is reserved.', array('%view_mode' => $view_mode['view_mode'])));
  }
  else {
    $view_mode['entities'] = $entities;
    $form_state['view_mode'] = $view_mode;
  }
}

/**
 * Saves the view mode.
 */
function ds_edit_view_mode_form_submit($form, &$form_state) {
  $view_mode = $form_state['view_mode'];

  // Save view mode.
  config('ds.view_modes.' . $view_mode['view_mode'])->setData($view_mode)->save();

  // Clear entity info cache and trigger menu build on next request.
  entity_info_cache_clear();
  variable_set('menu_router_rebuild_needed', TRUE);

  // Redirect.
  $form_state['redirect'] = 'admin/structure/ds/view_modes';
  drupal_set_message(t('The view mode %view_mode has been saved.', array('%view_mode' => $view_mode['label'])));
}

/**
 * Menu callback: Confirmation view mode delete form.
 */
function ds_delete_view_mode_confirm($form, &$form_state, $view_mode = '') {
  return ds_remove_view_mode_confirm($form, $form_state, $view_mode);
}

/**
 * Confirmation revert or remove form.
 */
function ds_remove_view_mode_confirm($form, &$form_state, $view_mode = '') {

  if ($view_mode = config('ds.view_modes.' . $view_mode)->get()) {
    $form['#view_mode'] = $view_mode;
    return confirm_form($form,
      t('Are you sure you want to delete %view_mode ?', array('%view_mode' => $view_mode['label'])),
      'admin/structure/ds/view_modes',
      t('This action cannot be undone.'),
      t('Delete'),
      t('Cancel')
    );
  }
  else {
    drupal_set_message(t('View mode not found.'));
    drupal_goto('admin/structure/ds/view_modes');
  }
}

/**
 * Confirmed view mode delete submit callback.
 */
function ds_delete_view_mode_confirm_submit($form, &$form_state) {
  ds_remove_view_mode($form, $form_state, 'deleted');
}

/**
 * Remove a view mode from the database.
 *
 * @param $action
 *   Whether we delete or remove the view mode.
 */
function ds_remove_view_mode($form, &$form_state) {

  $view_mode = $form['#view_mode'];

  // Remove view mode from database.
  config('ds.view_modes.' . $view_mode['view_mode'])->delete();

  // Remove layout and field settings for this view mode.
  $field_settings = config_get_storage_names_with_prefix('ds.field_settings');
  foreach ($field_settings as $config) {
    if (config($config)->get('view_mode') == $view_mode['view_mode']) {
      config($config)->delete();
    }
  }

  $layout_settings = config_get_storage_names_with_prefix('ds.layout_settings');
  foreach ($layout_settings as $config) {
    if (config($config)->get('view_mode') == $view_mode['view_mode']) {
      config($config)->delete();
    }
  }

  // Clear entity info cache and trigger menu build on next request.
  entity_info_cache_clear();
  variable_set('menu_router_rebuild_needed', TRUE);

  // Redirect.
  $form_state['redirect'] = 'admin/structure/ds/view_modes';
  drupal_set_message(t('The view mode %view_mode has been deleted.', array('%view_mode' => $view_mode['label'])));
}
