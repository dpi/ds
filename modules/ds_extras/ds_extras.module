<?php
/**
 * @file
 * Display Suite extras main functions.
 */

use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\ds\Ds;
use Drupal\Core\Entity\Display\EntityDisplayInterface;

/**
 * Implements hook_ds_layout_info_alter().
 */
function ds_extras_ds_layout_info_alter(&$layouts) {
  if (\Drupal::config('ds_extras.settings')->get('hidden_region')) {
    foreach ($layouts as $key => $layout) {
      $layouts[$key]['regions']['ds_hidden'] = t('Hidden');
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function ds_extras_module_implements_alter(&$implementations, $hook) {
  // Because it's possible to turn on/off features for DS extras,
  // we'll unset hooks here if necessary which otherwise do nothing at all.

  // Region to block
  $region_hooks = array(
    'ds_layout_region_alter',
    'entity_view_alter',
  );
  if (!\Drupal::config('ds_extras.settings')->get('region_to_block') && in_array($hook, $region_hooks)) {
    unset($implementations['ds_extras']);
  }

  // Extra fields
  $extra_fields_hooks = array(
    'field_extra_fields',
  );
  if (!\Drupal::config('ds_extras.settings')->get('fields_extra') && in_array($hook, $extra_fields_hooks)) {
    unset($implementations['ds_extras']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ds_extras_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state) {
  $form_state->loadInclude('ds_extras', 'inc', 'includes/admin');
  ds_extras_field_ui_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ds_extras_form_ds_admin_form_alter(&$form, FormStateInterface $form_state) {
  $form_state->loadInclude('ds_extras', 'inc', 'includes/admin');
  ds_extras_settings_alter($form, $form_state);
}

/**
 * DS fields access.
 *
 * @param $field
 *   The machine name of the field
 * @param $entity_type
 *   The name of the entity type.
 *
 * @return bool
 */
function ds_extras_ds_field_access($field, $entity_type) {
  if (\Drupal::currentUser()->hasPermission('view ' . $field . ' on ' . $entity_type)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_entity_view_alter().
 */
function ds_extras_entity_view_alter(&$build, EntityInterface $entity, EntityDisplayInterface $display) {

  $entity_type = $entity->getEntityTypeId();
  $bundle = $entity->bundle();
  $view_mode = $display->getMode();

  $block_data = &drupal_static('ds_block_region');
  $region_blocks = \Drupal::config('ds_extras.settings')->get('region_blocks');

  if (empty($region_blocks) || empty($build)) {
    return;
  }

  $properties = array();
  foreach (Element::properties($build) as $property) {
    $properties[$property] = $build[$property];
  }
  $properties['#view_mode'] = $view_mode;

  if ($ds_settings = $display->getThirdPartySettings('ds')) {
    foreach ($region_blocks as $block_key => $block) {
      if ($block['info'] == "{$entity_type}_{$bundle}_{$view_mode}" && isset($ds_settings['regions'][$block_key]) && !empty($ds_settings['regions'][$block_key])) {
        foreach ($ds_settings['regions'][$block_key] as $field) {
          if (isset($build[$field])) {
            $block_data[$block_key][$field] = $build[$field];
            unset($build[$field]);
          }
        }
        if (isset($block_data[$block_key]) && is_array($block_data[$block_key])) {
          $block_data[$block_key] += $properties;
        }
      }
    }
  }
}

/**
 * Implements hook_ds_layout_region_alter().
 */
function ds_extras_ds_layout_region_alter($context, &$region_info) {

  $region_blocks = \Drupal::config('ds_extras.settings')->get('region_blocks');

  // Bail out if region_blocks is empty or we are working on default view mode.
  if (empty($region_blocks) || $context['view_mode'] == 'default') {
    return;
  }

  $entity_type = $context['entity_type'];
  $bundle = $context['bundle'];
  $view_mode = $context['view_mode'];

  foreach ($region_blocks as $block_key => $block) {
    if ($block['info'] == "{$entity_type}_{$bundle}_{$view_mode}") {
      $region_info['region_options'][$block_key] = $block['title'];
      if (isset($region_info['table_regions'])) {
        $region_info['table_regions'][$block_key] = array(
          'title' => Html::escape($block['title']),
          'message' => t('No fields are displayed in this region'),
        );
      }
    }
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function ds_extras_entity_extra_field_info() {
  $extra = array();

  if (\Drupal::config('ds_extras.settings')->get('fields_extra')) {
    $fields = \Drupal::config('ds_extras.settings')->get('fields_extra_list');
    if (empty($fields)) {
      return $extra;
    }
    foreach ($fields as $field) {
      $field = trim($field);
      if (!empty($field)) {
        list($entity, $bundle, $field_name) = explode('|', $field);
        $extra[Html::escape($entity)][Html::escape($bundle)]['display'][$field_name] = array(
          'label' => Unicode::ucfirst(str_replace('_', ' ', Html::escape($field_name))),
          'description' => Unicode::ucfirst(str_replace('_', ' ', Html::escape($field_name))),
          'weight' => 0,
        );
      }
    }
  }

  return $extra;
}
